"  begun building my own .vimrc from this minimalistic one in Jan 2014 /David Engdal
"
" minimal vimrc for new vim users to start with.
"
" Referenced here:
" http://vimuniversity.com/samples/your-first-vimrc-should-be-nearly-empty
"
" Original Author:	 Bram Moolenaar <Bram@vim.org>
" Made more minimal by:  Ben Orenstein
" Last change:	         2012 Jan 20
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"
"  If you don't understand a setting in here, just type ':h setting'.

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

"I added the lines below to make the thing work in bloody win 7 (Dec 2014):
" Stolen from http://stackoverflow.com/users/1006963/darcyparker
"------------------------------------------------------------------------------

"g:my_vim_dir is used elsewhere in my vim configurations
let g:my_vim_dir=expand("$HOME/.vim")

"$HOME/.vim and $HOME/.vim/after are in the &rtp on unix
"But on windows, they need to be added.
if has("win16") || has("win32") || has("win64")
  "add g:my_vim_dir to the front of the runtimepath
   execute "set rtp^=".g:my_vim_dir
  "add g:my_vim_dir\after to the end of the runtimepath
  execute "set rtp+=".g:my_vim_dir."\\after"
  "Note, pathogen#infect() looks for the 'bundle' folder in each path
  "of the &rtp, where the last dir in the '&rtp path' is not 'after'. The
  "<path>\bundle\*\after folders will be added if and only if
  "the corresponding <path>\after folder is in the &rtp before
  "pathogen#infect() is called.  So it is very important to add the above
  "'after' folder.
  "(This applies to vim plugins such as snipmate, tabularize, etc.. that
  " are loaded by pathogen (and perhaps vundle too.))

  " Not necessary, but I like to cleanup &rtp to use \ instead of /
  " when on windows machines
  let &rtp=substitute(&rtp,"[/]","\\","g")

  "On windows, if called from cygwin or msys, the shell needs to be changed
  "to cmd.exe to work with certain plugins that expect cmd.exe on windows versions
  "of vim.
  if &shell=~#'bash$'
    set shell=$COMSPEC " sets shell to correct path for cmd.exe
  endif
endif

"Then I load pathogen... (Or if you prefer, you could load vundle bundles here if you wish )
"------------------------------------------------------------------------------


" setup Pathogen to manage plugins
filetype off                  " force reloading after pathogen loaded
call pathogen#infect()
call pathogen#incubate()
call pathogen#helptags()

" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" Colors
set t_Co=256

" Switch syntax highlighting on
syntax on

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" ESC is too far away 
inoremap jk <esc>

" tags and autochdir for effichient tags usage
set autochdir
set tags=./tags;/
"set tags+=/usr/include/tags
"set tags+=/opt/tags

" For indentation without tabs:
set expandtab
set shiftwidth=4
set softtabstop=4

" Color schemes, e.g. slate, dessert, or evening, elflord
"set t_Co=256
set background=dark
colorscheme dessert
"hi normal   ctermfg=black  ctermbg=white
highlight Normal ctermfg=grey ctermbg=black

" Nerdtree toggle
nmap <silent> <C-N> :NERDTreeToggle<CR>

" statusline
" set laststatus=2
" set statusline=%<%F\ %h%m%r%y%=%-14.(%l,%c%V%)\ %P
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" airline
let g:airline_theme             = 'powerlineish'
let g:airline_enable_branch     = 1
let g:airline_enable_syntastic  = 1
set laststatus=2
set lazyredraw

" fugitive
cnoremap gt Gstatus

" syntastic
let g:syntastic_c_check_header = 1
let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['c', 'h', 'py'], 'passive_filetypes': [] }
let g:syntastic_c_checkers = ['gcc', 'splint']
let g:syntastic_python_checkers = ['pylint']
" put a file named '.syntastic_c_config' in top of your project dir
" and put one line per inc dir in it like:
" -Iincludedir
" Comment: It seems every checker needs its own global config, at least
" splint does.
let g:syntastic_c_config_file = '.syntastic_c_config'
let g:syntastic_splint_config_file = '.syntastic_c_config'
let g:syntastic_aggregate_errors = 1
"let g:syntastic_loc_list_height = 5
"let g:syntastic_enable_signs = 1
"let g:syntastic_enable_balloons = 1

" my other keyboard mappings
" insert date and time:
inoremap <F3> <C-R>=strftime('%c')<CR><Esc>
" insert dir:
inoremap <F2> <C-R>=expand('%:p:h')<CR>

" neocomplete
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" clang_complete
" path for osx:
"let g:clang_library_path = '/Developer/usr/clang-ide/lib'
" for Ubuntu:
"let g:clang_library_path = '/usr/lib'
"let g:clang_library_path = '/usr/lib/x86_64-linux-gnu'
let g:clang_use_library = 1
" Avoid freezing on offending code
let g:clang_user_options='|| exit 0'
let g:clang_close_preview=1

" Removes trailing spaces
function! TrimWhiteSpace()
     %s/\s\+$//e
endfunction

nnoremap <silent> <Leader>rts :call TrimWhiteSpace()<CR>

autocmd FileWritePre    * :call TrimWhiteSpace()
autocmd FileAppendPre   * :call TrimWhiteSpace()
autocmd FilterWritePre  * :call TrimWhiteSpace()
autocmd BufWritePre     * :call TrimWhiteSpace()
